<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
                           http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!--该注解是激活已经在application context中注册的bean，也就是使自带的注解起作用，配置了自动扫描则不需要再配置这个了-->
    <!--<context:annotation-config/>-->
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller等注解的类是控制器 -->
    <context:component-scan base-package="cn.yu.controller,cn.yu.services.impl"/>

    <!--<aop:aspectj-autoproxy />有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，
    当配为<aop:aspectj-autoproxy  poxy-target-class="true"/>时，表示使用CGLib动态代理技术织入增强。
    不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!-- org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
        它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
        就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。 -->
    <mvc:default-servlet-handler/>
   <!--静态资源 <mvc:default-servlet-handler />将静态资源的处理经由Spring MVC框架交回Web应用服务器处理。
                而<mvc:resources />更进一步，由Spring MVC框架自己处理静态资源，并添加一些有用的附加值功能。-->
    <!-- 对静态资源文件的访问 支持访问WEB-INF目录 -->
    <!--<mvc:resources mapping="/css/**" location="/css/" />-->
    <!--<mvc:resources mapping="/js/**" location="/js/" />-->
    <!--<mvc:resources mapping="/fonts/**" location="/fonts/" />-->
    <!--<mvc:resources mapping="/test/**" location="/test/" />-->
    <mvc:default-servlet-handler/>

    <!--<mvc:annotation-driven validator="validator">--><!--加入validator启动异常-->

    <!-- 告知Spring，我们启用注解驱动 -->
    <mvc:annotation-driven >
        <!-- 处理responseBody 里面日期类型 -->
        <mvc:message-converters>
            <bean id="converter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="charset" value="UTF-8"/>
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>WriteMapNullValue</value>
                        <value>QuoteFieldNames</value>
                        <value>WriteEnumUsingToString</value>
                        <value>DisableCircularReferenceDetect</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--websocket配置-->
    <!--<bean id="websocketHandler" class="cn.yu.services.impl.websocket.WebsocketSystemNoticeHandler"/>-->
    <!--&lt;!&ndash; 握手接口/拦截器 &ndash;&gt;-->
    <!--<bean id="websocketInterceptor" class="cn.yu.services.impl.websocket.HandshakeInterceptor"/>-->
    <!--<websocket:handlers allowed-origins="*">-->
        <!--<websocket:mapping path="/websocket" handler="websocketHandler" />-->
        <!--<websocket:handshake-interceptors>-->
            <!--<ref bean="websocketInterceptor"/>-->
        <!--</websocket:handshake-interceptors>-->
    <!--</websocket:handlers>-->

    <!--&lt;!&ndash;  注册 sockJS &ndash;&gt;-->
    <!--<websocket:handlers>-->
        <!--<websocket:mapping path="/sockjs/websocket" handler="websocketHandler"/>-->
        <!--<websocket:handshake-interceptors>-->
            <!--<ref bean="websocketInterceptor"/>-->
        <!--</websocket:handshake-interceptors>-->
        <!--<websocket:sockjs />-->
    <!--</websocket:handlers>-->

    <!-- 文件上传参数设置 --><!--启动异常-->
    <!--<bean id="multipartResolver"-->
          <!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="maxUploadSize" value="204800000"/>-->
    <!--</bean>-->


    <!--<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>-->

    <!--<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"></bean>-->

</beans>
